#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para simular webhook do WhatsApp com clientes √∫nicos
Execute: python simular_webhook.py
"""

import requests
import json
import random
import time
from datetime import datetime

# Configura√ß√£o
BASE_URL = "http://localhost:8000"  # Altere para sua URL em produ√ß√£o
ACCOUNT_ID = 1  # ID da conta WhatsApp


def gerar_cliente_unico():
    """Gera dados √∫nicos para um cliente"""
    timestamp = int(time.time())
    
    # N√∫mero √∫nico baseado no timestamp
    client_number = f"5511{timestamp % 100000000:08d}"
    
    # Nomes de clientes
    client_names = [
        "Maria Silva", "Jo√£o Santos", "Ana Costa", "Pedro Oliveira", 
        "Carla Lima", "Jos√© Ferreira", "Lucia Pereira", "Carlos Souza", 
        "Rita Almeida", "Marcos Ribeiro", "Fernanda Rocha", "Bruno Alves",
        "Patricia Mendes", "Roberto Costa", "Juliana Dias", "Ant√¥nio Pereira",
        "Luciana Santos", "Rafael Lima", "Gabriela Costa", "Thiago Oliveira"
    ]
    client_name = random.choice(client_names)
    
    # Mensagens variadas
    messages = [
        "Ol√°! Gostaria de informa√ß√µes sobre pacotes de viagem.",
        "Bom dia! Voc√™s t√™m promo√ß√µes para o Nordeste?",
        "Oi! Preciso de um or√ßamento para lua de mel na Europa.",
        "Ol√°! Quais s√£o os destinos dispon√≠veis para fam√≠lia?",
        "Boa tarde! Gostaria de saber sobre pacotes para Disney.",
        "Oi! Voc√™s fazem viagens para o exterior?",
        "Ol√°! Preciso de informa√ß√µes sobre cruzeiros.",
        "Bom dia! Quero viajar nas f√©rias de julho, t√™m op√ß√µes?",
        "Oi! Gostaria de um pacote all inclusive.",
        "Ol√°! Voc√™s trabalham com turismo rural?",
        "Boa tarde! Tem algum pacote para Bahia?",
        "Oi! Queria saber pre√ßos para Canc√∫n.",
        "Ol√°! Voc√™s organizam excurs√µes para grupos?",
        "Bom dia! Gostaria de viajar para a Argentina.",
        "Oi! Tem pacotes para o Chile?",
        "Ol√°! Quero informa√ß√µes sobre Fernando de Noronha.",
        "Bom dia! Voc√™s fazem pacotes personalizados?",
        "Oi! Gostaria de um or√ßamento para Gramado.",
        "Ol√°! Tem promo√ß√£o para o Cear√°?",
        "Boa tarde! Quero viajar para Portugal."
    ]
    message_text = random.choice(messages)
    
    return {
        'name': client_name,
        'number': client_number,
        'message': message_text,
        'timestamp': timestamp
    }


def criar_payload_webhook(client_data, message_type="text"):
    """Cria o payload JSON para o webhook"""
    message_id = f"wamid.TEST_{client_data['timestamp']}"
    
    # Base do payload
    payload = {
        "object": "whatsapp_business_account",
        "entry": [
            {
                "id": "WHATSAPP_BUSINESS_ACCOUNT_ID",
                "changes": [
                    {
                        "value": {
                            "messaging_product": "whatsapp",
                            "metadata": {
                                "display_phone_number": "5511999999999",
                                "phone_number_id": "PHONE_NUMBER_ID"
                            },
                            "contacts": [
                                {
                                    "profile": {
                                        "name": client_data['name']
                                    },
                                    "wa_id": client_data['number']
                                }
                            ],
                            "messages": [
                                {
                                    "from": client_data['number'],
                                    "id": message_id,
                                    "timestamp": str(client_data['timestamp']),
                                    "type": message_type
                                }
                            ]
                        },
                        "field": "messages"
                    }
                ]
            }
        ]
    }
    
    # Configura o conte√∫do baseado no tipo
    message_obj = payload["entry"][0]["changes"][0]["value"]["messages"][0]
    
    if message_type == "text":
        message_obj["text"] = {
            "body": client_data['message']
        }
    elif message_type == "image":
        message_obj["image"] = {
            "id": f"media_img_{client_data['timestamp']}",
            "mime_type": "image/jpeg",
            "sha256": "fake_sha256_hash_for_image",
            "caption": client_data.get('caption', "Foto enviada pelo cliente")
        }
    elif message_type == "audio":
        message_obj["audio"] = {
            "id": f"media_audio_{client_data['timestamp']}",
            "mime_type": "audio/ogg; codecs=opus",
            "sha256": "fake_sha256_hash_for_audio"
        }
    elif message_type == "video":
        message_obj["video"] = {
            "id": f"media_video_{client_data['timestamp']}",
            "mime_type": "video/mp4",
            "sha256": "fake_sha256_hash_for_video",
            "caption": client_data.get('caption', "V√≠deo enviado pelo cliente")
        }
    elif message_type == "document":
        message_obj["document"] = {
            "id": f"media_doc_{client_data['timestamp']}",
            "mime_type": "application/pdf",
            "sha256": "fake_sha256_hash_for_document",
            "filename": client_data.get('filename', "documento.pdf"),
            "caption": client_data.get('caption', "Documento enviado pelo cliente")
        }
    
    return payload


def escolher_tipo_mensagem():
    """Permite ao usu√°rio escolher o tipo de mensagem"""
    print("üì± Tipos de mensagem dispon√≠veis:")
    print("1. Texto (padr√£o)")
    print("2. Imagem com legenda")
    print("3. √Åudio")
    print("4. V√≠deo com legenda")
    print("5. Documento PDF")
    print()
    
    while True:
        try:
            opcao = input("Escolha o tipo (1-5) [1]: ").strip()
            if opcao == "" or opcao == "1":
                return "text", {}
            elif opcao == "2":
                caption = input("Digite a legenda da imagem: ").strip()
                return "image", {"caption": caption if caption else "Foto enviada pelo cliente"}
            elif opcao == "3":
                return "audio", {}
            elif opcao == "4":
                caption = input("Digite a legenda do v√≠deo: ").strip()
                return "video", {"caption": caption if caption else "V√≠deo enviado pelo cliente"}
            elif opcao == "5":
                filename = input("Nome do arquivo [documento.pdf]: ").strip()
                caption = input("Digite a legenda do documento: ").strip()
                return "document", {
                    "filename": filename if filename else "documento.pdf",
                    "caption": caption if caption else "Documento enviado pelo cliente"
                }
            else:
                print("Op√ß√£o inv√°lida. Digite um n√∫mero de 1 a 5.")
        except KeyboardInterrupt:
            print("\n‚ùå Cancelado")
            exit()


def enviar_webhook():
    """Envia webhook simulado para o sistema"""
    # Escolhe tipo de mensagem
    message_type, extra_data = escolher_tipo_mensagem()
    
    # Gera cliente √∫nico
    client_data = gerar_cliente_unico()
    client_data.update(extra_data)  # Adiciona dados extras (caption, filename, etc.)
    
    print(f"\nüë§ Cliente gerado: {client_data['name']} ({client_data['number']})")
    
    if message_type == "text":
        print(f"üí¨ Mensagem: {client_data['message']}")
    elif message_type == "image":
        print(f"üì∑ Imagem: {client_data.get('caption', 'Foto enviada pelo cliente')}")
    elif message_type == "audio":
        print(f"üéµ √Åudio enviado")
    elif message_type == "video":
        print(f"üé• V√≠deo: {client_data.get('caption', 'V√≠deo enviado pelo cliente')}")
    elif message_type == "document":
        print(f"üìÑ Documento: {client_data.get('filename', 'documento.pdf')}")
        if client_data.get('caption'):
            print(f"    Legenda: {client_data['caption']}")
    print()

    # Cria payload
    webhook_payload = criar_payload_webhook(client_data, message_type)
    
    url = f"{BASE_URL}/webhook/whatsapp/{ACCOUNT_ID}/"

    print(f"üì§ Enviando webhook para: {url}")
    print()

    try:
        # Envia POST com o payload
        response = requests.post(
            url,
            json=webhook_payload,
            headers={
                "Content-Type": "application/json",
                "User-Agent": "WhatsApp/2.0",
            },
            timeout=10
        )

        print(f"Status: {response.status_code}")

        if response.status_code == 200:
            print("‚úÖ Webhook enviado com sucesso!")
            print()
            print("üîç Verifique agora:")
            print(f"1. P√°gina de debug: {BASE_URL}/administracao/whatsapp/account/{ACCOUNT_ID}/debug/")
            print(f"2. Fila comercial: {BASE_URL}/comercial/whatsapp/")
            print()
            print("üìä Para verificar no banco:")
            print('python manage.py shell -c "from core.models import WhatsAppMessage, WhatsAppConversation; print(f\'Mensagens: {WhatsAppMessage.objects.count()}\'); print(f\'Conversas pendentes: {WhatsAppConversation.objects.filter(status=\\"pending\\").count()}\')"')
            print()
            print("üîî Se estiver com a p√°gina comercial aberta, voc√™ deve receber:")
            print("   ‚Ä¢ Notifica√ß√£o WebSocket em tempo real")
            print("   ‚Ä¢ Som de notifica√ß√£o")
            print("   ‚Ä¢ Atualiza√ß√£o do contador")
        else:
            print(f"‚ùå Erro: Status {response.status_code}")
            print(f"Resposta: {response.text}")

    except requests.exceptions.ConnectionError:
        print("‚ùå Erro: N√£o foi poss√≠vel conectar ao servidor")
        print(f"Verifique se o Django est√° rodando em {BASE_URL}")
    except Exception as e:
        print(f"‚ùå Erro: {e}")


if __name__ == "__main__":
    print("=" * 60)
    print("üöÄ SIMULADOR DE WEBHOOK WHATSAPP")
    print("=" * 60)
    print()

    print(f"Servidor: {BASE_URL}")
    print(f"Account ID: {ACCOUNT_ID}")
    print()
    
    print("üìã O que este script faz:")
    print("   ‚Ä¢ Gera um cliente √∫nico com nome e n√∫mero aleat√≥rios")
    print("   ‚Ä¢ Permite escolher tipo de mensagem (texto, imagem, √°udio, v√≠deo, documento)")
    print("   ‚Ä¢ Envia webhook simulado do WhatsApp com m√≠dia ou texto")
    print("   ‚Ä¢ Cria nova conversa pendente na fila comercial")
    print("   ‚Ä¢ Testa o download autom√°tico de m√≠dias para S3")
    print("   ‚Ä¢ Dispara notifica√ß√£o WebSocket em tempo real")
    print()

    resposta = input("Deseja enviar o webhook simulado? (s/N): ")

    if resposta.lower() == "s":
        print()
        enviar_webhook()
    else:
        print("‚ùå Cancelado")
